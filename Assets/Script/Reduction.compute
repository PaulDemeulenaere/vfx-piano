#pragma kernel Clear_Keys
#pragma kernel Compute_Keys

#define NUMBERS_OF_KEYS 8
RWByteAddressBuffer Keys;
Texture2D<float> Capture;

[numthreads(NUMBERS_OF_KEYS / 4, 1, 1)]
void Clear_Keys(uint3 id : SV_DispatchThreadID)
{
    Keys.Store4(4 * 4 * id.x, (uint4)0);
}

#define THREAD_SIZE 8
groupshared uint g_Keys[NUMBERS_OF_KEYS];
[numthreads(THREAD_SIZE, THREAD_SIZE, 1)]
void Compute_Keys(uint2 groupThreadId : SV_GroupThreadID, uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint localGroupIndex = groupThreadId.y * THREAD_SIZE + groupThreadId.x;
    if (localGroupIndex < NUMBERS_OF_KEYS)
    {
        g_Keys[localGroupIndex] = 0;
    }
    GroupMemoryBarrierWithGroupSync();

    float readCapture = Capture.Load(dispatchThreadId);
    uint currentKey = (dispatchThreadId.x / (256 / NUMBERS_OF_KEYS));

    if (readCapture != 0.0f)
        InterlockedAdd(g_Keys[currentKey], 1);

    GroupMemoryBarrierWithGroupSync();

    if (localGroupIndex < NUMBERS_OF_KEYS)
    {
        uint previous;
        Keys.InterlockedAdd(localGroupIndex * 4, g_Keys[localGroupIndex], previous);
    }
}
